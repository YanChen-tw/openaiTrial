name: Spring Boot CI/CD Pipeline with Auto Version Update (Start from V1.0.0)

on:
  push:
    branches: [ main ]

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          java-security: true  # Enable security features for Java

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Get current version (Optional)
        id: get_version  # Optional step to retrieve current version
        run: grep -Eo 'version=.*' VERSION | cut -d'=' -f2  # Replace VERSION with your version file path
        if: always()  # Always run to handle initial version or no previous tag

      - name: Update version automatically
        uses: community/generate-version@v2.0.1  # Replace with your preferred versioning action
        with:
          file: VERSION  # Replace with the path to your version file (e.g., pom.xml)
          new-version: ${{ steps.get_version.outputs || '1.0.0' }}  # Use retrieved version or start with 1.0.0
          types: [ patch, minor, major ]  # Choose allowed version bumps (all by default)

      - name: Print new version
        run: echo "New version: ${{ steps.update_version.outputs.new_version }}"

      - name: Install Maven dependencies
        run: mvn clean install

      - name: Run SonarQube analysis (Optional)
        uses: sonarsource/sonarqube-scanner-action@v3
        with:
          serverUrl: https://your-sonar-server.com  # Replace with your SonarQube server URL
          projectKey: your-project-key  # Replace with your SonarQube project key
          token: ${{ secrets.SONAR_TOKEN }}  # Reference SonarQube token stored as a secret
          analysisMode: 'scan'
        # Additional SonarQube scanner options can be specified here

      - name: Run Snyk Identify
        run: snyk identify --file pom.xml

      - name: Run Snyk Code (Optional)
        run: snyk code --org-name your-organization --project-name your-project-name
          if: ${{ secrets.SNYK_TOKEN }}  # Only run if SNYK_TOKEN secret is defined

      - name: Build Spring Boot application
        run: mvn package

Use code with caution.
content_copy
Explanation:

on: This section defines the workflow trigger. It runs on pushes to the main branch.
jobs: This defines the jobs within the workflow. Here, we have one job named build_and_test.
runs-on: This defines the runner environment (OS) for the job.
Steps: These are the individual steps executed within the job:
Checkout: This checks out the code from the repository.
Set up JDK 11: This sets up a JDK 11 environment with security features enabled.
Cache Maven packages: This caches Maven packages to improve build speed.
Get current version (Optional): This optional step retrieves the current version from your version file (replace VERSION with the actual path) using grep or a similar tool. It runs even if there's no previous version.
Update version automatically: This uses the community/generate-version action to update the version in your version file. It uses the retrieved version (if any) or starts with 1.0.0 as the base.
Print new version: This (optional) step prints the newly generated version for informational purposes.
Install Maven dependencies: This installs the project's dependencies using Maven.
Run SonarQube analysis (Optional): This uses the `