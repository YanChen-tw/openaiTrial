# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          java-security: true  # Enable security features for Java

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Update version (Optional)
        uses: community/generate-version@v2.0.1  # Replace with your preferred versioning action
        with:
          file: VERSION  # Replace with the path to your version file (e.g., pom.xml)
          types: [ patch, minor, major ]  # Choose allowed version bumps
        if: ${{ github.event_name == 'push' && github.base_ref == 'main' }}  # Only update on push to main branch

      - name: Install Maven dependencies
        run: mvn clean install

      - name: Run SonarQube analysis (Optional)
        uses: sonarsource/sonarqube-scanner-action@v3
        with:
          serverUrl: https://your-sonar-server.com  # Replace with your SonarQube server URL
          projectKey: your-project-key  # Replace with your SonarQube project key
          token: ${{ secrets.SONAR_TOKEN }}  # Reference SonarQube token stored as a secret
          analysisMode: 'scan'
        # Additional SonarQube scanner options can be specified here

      - name: Run Snyk Identify
        run: snyk identify --file pom.xml

      - name: Run Snyk Code (Optional)
        run: snyk code --org-name your-organization --project-name your-project-name
          if: ${{ secrets.SNYK_TOKEN }}  # Only run if SNYK_TOKEN secret is defined

      - name: Build Spring Boot application
        run: mvn package

